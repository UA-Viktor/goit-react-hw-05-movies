{"version":3,"file":"static/js/475.72db7c85.chunk.js","mappings":"iNAEaA,EAAOC,EAAAA,EAAAA,GAAH,6GAQJC,EAAOD,EAAAA,EAAAA,GAAH,qIASJE,EAAUF,EAAAA,EAAAA,QAAH,2D,SCYpB,EA1BmB,SAAC,GAAD,IAAGG,EAAH,EAAGA,OAAQC,EAAX,EAAWA,SAAX,OACjB,SAACL,EAAD,UACGI,EAAOE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,aAAcC,EAAlC,EAAkCA,MAAOC,EAAzC,EAAyCA,aAAzC,OACV,SAACT,EAAD,WACE,SAAC,KAAD,CAAMU,GAAE,kBAAaL,GAAMM,MAAO,CAAEC,KAAMT,GAA1C,UACE,UAACF,EAAD,WACGK,GACC,gBACEO,IAAG,0CAAqCP,GACxCQ,IAAKN,KAKP,gBAAKK,IAAG,U,krKAAYC,IAAKN,EAAOO,MAAM,QAAQC,OAAO,WAEvD,wBAAKR,KACL,uBAAID,KACJ,uBAAIE,UAfCJ,EADD,KAFG,C,+HCHNY,E,OAAWlB,EAAAA,IAAH,wL,SCKfmB,EAAO,WACX,IAAMf,GAAWgB,EAAAA,EAAAA,MACjB,GAA4CC,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,uBAAiCC,MAAK,SAAAC,GACpCJ,EAAkBI,EACnB,GACF,GAAE,IAEHC,QAAQC,IAAIP,IAGV,iCACE,SAACJ,EAAD,wIAEA,SAACY,EAAA,EAAD,CAAY3B,OAAQmB,EAAgBlB,SAAUA,MAGnD,EAED,GAAe2B,EAAAA,EAAAA,MAAKZ,E,mCC1BpBa,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAsDVR,EAAY,CAChBS,qBArD2B,WAC3B,OAAOF,EAAAA,EAAAA,IACA,uBAAwB,CAC3BG,OAAQ,CACNC,QAASH,EACTI,SAAU,QAGbX,MAAK,SAAAC,GAAQ,OAAIA,EAASW,KAAKC,OAAlB,GACjB,EA6CCC,aA3CmB,SAAAC,GACnB,OAAOT,EAAAA,EAAAA,IACA,gBAAiB,CACpBG,OAAQ,CACNC,QAASH,EACTQ,MAAOA,KAGVf,MAAK,SAAAC,GAAQ,OAAIA,EAASW,KAAKC,OAAlB,GACjB,EAmCCG,eAjCqB,SAAApC,GACrB,OAAO0B,EAAAA,EAAAA,IACA,UAAY1B,EAAI,CACnB6B,OAAQ,CACNC,QAASH,KAGZP,MAAK,SAAAC,GAAQ,OAAIA,EAASW,IAAb,GACjB,EA0BCK,sBAxB4B,SAAArC,GAC5B,OAAO0B,EAAAA,EAAAA,IACA,UAAY1B,EAAK,WAAY,CAChC6B,OAAQ,CACNC,QAASH,KAGZP,MAAK,SAAAC,GAAQ,OAAIA,EAASW,KAAKM,IAAlB,GACjB,EAiBCC,sBAf4B,SAAAvC,GAC5B,OAAO0B,EAAAA,EAAAA,IACA,UAAY1B,EAAK,WAAY,CAChC6B,OAAQ,CACNC,QAASH,KAGZP,MAAK,SAAAC,GAAQ,OAAIA,EAASW,KAAKC,OAAlB,GACjB,GAUD,K","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.js","pages/Home.styled.jsx","pages/Home.js","services/movies-api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n\n  margin-top: -15px;\n  margin-left: -15px;\n`;\n\nexport const Item = styled.li`\n  flex-basis: calc(100% / 5 - 15px);\n\n  margin-top: 15px;\n  margin-left: 15px;\n\n  margin-bottom: 15px;\n`;\n\nexport const Article = styled.article`\n  width: 220px;\n  height: 440px;\n`;\n\n// overflow: hidden;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { List, Item, Article } from './MoviesList.styled';\nimport img from '../../img/no_name.png';\n\nconst MoviesList = ({ movies, location }) => (\n  <List>\n    {movies.map(({ id, poster_path, release_date, title, vote_average }) => (\n      <Item key={id}>\n        <Link to={`/movies/${id}`} state={{ from: location }}>\n          <Article>\n            {poster_path ? (\n              <img\n                src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\n                alt={title}\n                // width=\"250px\"\n                // height=\"350px\"\n              />\n            ) : (\n              <img src={`${img}`} alt={title} width=\"250px\" height=\"350px\" />\n            )}\n            <h2>{title}</h2>\n            <p>{release_date}</p>\n            <p>{vote_average}</p>\n          </Article>\n        </Link>\n      </Item>\n    ))}\n  </List>\n);\n\nexport default MoviesList;\n","import styled from '@emotion/styled';\n\nexport const Headline = styled.div`\n  font-family: 'Manrope';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 1.33;\n\n  color: #161900;\n\n  margin-bottom: 20px;\n`;\n","import { useState, useEffect, memo } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport moviesAPI from '../services/movies-api';\n\nimport MoviesList from '../components/MoviesList/MoviesList';\nimport { Headline } from './Home.styled';\n\nconst Home = () => {\n  const location = useLocation();\n  const [trendingMovies, setTrendingMovies] = useState([]);\n\n  useEffect(() => {\n    moviesAPI.searchMoviesTrending().then(response => {\n      setTrendingMovies(response);\n    });\n  }, []);\n\n  console.log(trendingMovies);\n\n  return (\n    <>\n      <Headline>Новинки та ТОП 20 Фільмів</Headline>\n\n      <MoviesList movies={trendingMovies} location={location} />\n    </>\n  );\n};\n\nexport default memo(Home);\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '09e88d7dd6157842e835fc31a8c547c7';\n\nconst searchMoviesTrending = () => {\n  return axios\n    .get('/trending/movie/week', {\n      params: {\n        api_key: API_KEY,\n        language: 'uk',\n      },\n    })\n    .then(response => response.data.results);\n};\n\nconst searchMovies = query => {\n  return axios\n    .get('/search/movie', {\n      params: {\n        api_key: API_KEY,\n        query: query,\n      },\n    })\n    .then(response => response.data.results);\n};\n\nconst searchMoviesID = id => {\n  return axios\n    .get('/movie/' + id, {\n      params: {\n        api_key: API_KEY,\n      },\n    })\n    .then(response => response.data);\n};\n\nconst searchMoviesIDcredits = id => {\n  return axios\n    .get('/movie/' + id + '/credits', {\n      params: {\n        api_key: API_KEY,\n      },\n    })\n    .then(response => response.data.cast);\n};\n\nconst searchMoviesIDreviews = id => {\n  return axios\n    .get('/movie/' + id + '/reviews', {\n      params: {\n        api_key: API_KEY,\n      },\n    })\n    .then(response => response.data.results);\n};\n\nconst moviesAPI = {\n  searchMoviesTrending,\n  searchMovies,\n  searchMoviesID,\n  searchMoviesIDcredits,\n  searchMoviesIDreviews,\n};\n\nexport default moviesAPI;\n"],"names":["List","styled","Item","Article","movies","location","map","id","poster_path","release_date","title","vote_average","to","state","from","src","alt","width","height","Headline","Home","useLocation","useState","trendingMovies","setTrendingMovies","useEffect","moviesAPI","then","response","console","log","MoviesList","memo","axios","API_KEY","searchMoviesTrending","params","api_key","language","data","results","searchMovies","query","searchMoviesID","searchMoviesIDcredits","cast","searchMoviesIDreviews"],"sourceRoot":""}