{"version":3,"file":"static/js/475.9605f2e2.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.js","pages/Home.styled.jsx","pages/Home.js","services/movies-api.js"],"sourcesContent":["import { Link } from 'react-router-dom';\n\nimport styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n\n  margin-top: -15px;\n  margin-left: -15px;\n`;\n\nexport const LinkStyled = styled(Link)`\n  text-decoration: none;\n`;\n\nexport const Item = styled.li`\n  overflow: hidden;\n\n  flex-basis: calc(100% / 5 - 15px);\n\n  margin-top: 15px;\n  margin-left: 15px;\n\n  margin-bottom: 15px;\n\n  box-shadow: 0px 0px 30px -7px rgba(0, 0, 0, 0.25);\n  border-radius: 10px 10px 10px 10px;\n`;\n\nexport const Article = styled.article`\n  width: 220px;\n  height: 440px;\n`;\n\nexport const Imeg = styled.img`\n  height: 330px;\n`;\n\nexport const Title = styled.h2`\n  font-size: 16px;\n  font-weight: 500;\n\n  color: #161900;\n`;\n\nexport const InfoMain = styled.div`\n  height: 90px;\n\n  display: flex;\n  flex-direction: column;\n\n  justify-content: space-between;\n  padding: 10px;\n`;\n\nexport const Info = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const ReleaseDate = styled.p`\n  font-size: 14px;\n  margin-bottom: 5px;\n  color: #214e50;\n`;\n\nexport const VoteAverage = styled.p`\n  font-size: 14px;\n  margin-bottom: 5px;\n  color: #214e50;\n`;\n","import React from 'react';\n// import { Link } from 'react-router-dom';\nimport {\n  List,\n  Item,\n  Article,\n  Title,\n  ReleaseDate,\n  VoteAverage,\n  Imeg,\n  LinkStyled,\n  InfoMain,\n  Info,\n} from './MoviesList.styled';\nimport img from '../../img/no_name.png';\n\nconst MoviesList = ({ movies, location }) => (\n  <List>\n    {movies.map(({ id, poster_path, release_date, title, vote_average }) => (\n      <Item key={id}>\n        <LinkStyled to={`/movies/${id}`} state={{ from: location }}>\n          <Article>\n            {poster_path ? (\n              <Imeg\n                src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\n                alt={title}\n              />\n            ) : (\n              <Imeg src={`${img}`} alt={title} width=\"250px\" height=\"350px\" />\n            )}\n            <InfoMain>\n              <Title>{title}</Title>\n              <Info>\n                <ReleaseDate>{release_date?.slice(0, 4)}</ReleaseDate>\n                <VoteAverage>{vote_average}</VoteAverage>\n              </Info>\n            </InfoMain>\n          </Article>\n        </LinkStyled>\n      </Item>\n    ))}\n  </List>\n);\n\nexport default MoviesList;\n","import styled from '@emotion/styled';\n\nexport const Headline = styled.div`\n  font-family: 'Manrope';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 1.33;\n\n  color: #161900;\n\n  margin-bottom: 20px;\n`;\n","import { useState, useEffect, memo } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport moviesAPI from '../services/movies-api';\n\nimport MoviesList from '../components/MoviesList/MoviesList';\nimport { Headline } from './Home.styled';\n\nconst Home = () => {\n  const location = useLocation();\n  const [trendingMovies, setTrendingMovies] = useState([]);\n\n  useEffect(() => {\n    moviesAPI.searchMoviesTrending().then(response => {\n      setTrendingMovies(response);\n    });\n  }, []);\n\n  console.log(trendingMovies);\n\n  return (\n    <>\n      <Headline>Новинки та ТОП 20 Фільмів</Headline>\n\n      <MoviesList movies={trendingMovies} location={location} />\n    </>\n  );\n};\n\nexport default memo(Home);\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '09e88d7dd6157842e835fc31a8c547c7';\n\nconst searchMoviesTrending = () => {\n  return axios\n    .get('/trending/movie/week', {\n      params: {\n        api_key: API_KEY,\n        language: 'uk',\n      },\n    })\n    .then(response => response.data.results);\n};\n\nconst searchMovies = query => {\n  return axios\n    .get('/search/movie', {\n      params: {\n        api_key: API_KEY,\n        query: query,\n      },\n    })\n    .then(response => response.data.results);\n};\n\nconst searchMoviesID = id => {\n  return axios\n    .get('/movie/' + id, {\n      params: {\n        api_key: API_KEY,\n      },\n    })\n    .then(response => response.data);\n};\n\nconst searchMoviesIDcredits = id => {\n  return axios\n    .get('/movie/' + id + '/credits', {\n      params: {\n        api_key: API_KEY,\n      },\n    })\n    .then(response => response.data.cast);\n};\n\nconst searchMoviesIDreviews = id => {\n  return axios\n    .get('/movie/' + id + '/reviews', {\n      params: {\n        api_key: API_KEY,\n      },\n    })\n    .then(response => response.data.results);\n};\n\nconst searchMovieTrailer = movieId => {\n  return axios\n    .get(`/movie/${movieId}/videos`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    })\n    .then(response => {\n      const videoResults = response.data.results;\n      const trailer = videoResults.find(video => video.type === 'Trailer');\n      if (trailer) {\n        return `https://www.youtube.com/watch?v=${trailer.key}`;\n      }\n      return null;\n    });\n};\n\nconst moviesAPI = {\n  searchMoviesTrending,\n  searchMovies,\n  searchMoviesID,\n  searchMoviesIDcredits,\n  searchMoviesIDreviews,\n  searchMovieTrailer,\n};\n\nexport default moviesAPI;\n"],"names":["List","styled","LinkStyled","Link","Item","Article","Imeg","Title","InfoMain","Info","ReleaseDate","VoteAverage","movies","location","map","id","poster_path","release_date","title","vote_average","to","state","from","src","alt","width","height","slice","Headline","Home","useLocation","useState","trendingMovies","setTrendingMovies","useEffect","moviesAPI","then","response","console","log","MoviesList","memo","axios","API_KEY","searchMoviesTrending","params","api_key","language","data","results","searchMovies","query","searchMoviesID","searchMoviesIDcredits","cast","searchMoviesIDreviews","searchMovieTrailer","movieId","trailer","find","video","type","key"],"sourceRoot":""}