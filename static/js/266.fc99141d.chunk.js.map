{"version":3,"file":"static/js/266.fc99141d.chunk.js","mappings":"+MAEaA,EAAOC,EAAAA,EAAAA,GAAH,w2BASJC,EAAOD,EAAAA,EAAAA,GAAH,+qC,SCkBjB,EAxBmB,SAAC,GAAD,IAAGE,EAAH,EAAGA,OAAQC,EAAX,EAAWA,SAAX,OACjB,SAACJ,EAAD,UACGG,EAAOE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,aAAcC,EAAlC,EAAkCA,MAAOC,EAAzC,EAAyCA,aAAzC,OACV,SAACR,EAAD,WACE,UAAC,KAAD,CAAMS,GAAE,kBAAaL,GAAMM,MAAO,CAAEC,KAAMT,GAA1C,UACGG,GACC,gBACEO,IAAG,0CAAqCP,GACxCQ,IAAKN,EACLO,MAAM,QACNC,OAAO,WAGT,gBAAKH,IAAG,U,krKAAYC,IAAKN,EAAOO,MAAM,QAAQC,OAAO,WAEvD,wBAAKR,KACL,uBAAID,KACJ,uBAAIE,QAdGJ,EADD,KAFG,C,uFCCbY,EAAO,WACX,IAAMd,GAAWe,EAAAA,EAAAA,MACjB,GAA4CC,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,uBAAiCC,MAAK,SAAAC,GACpCJ,EAAkBI,EACnB,GACF,GAAE,IAEHC,QAAQC,IAAIP,IAGV,iCACE,+FAEA,SAAC,IAAD,CAAYlB,OAAQkB,EAAgBjB,SAAUA,MAGnD,EAED,WAAeyB,EAAAA,EAAAA,MAAKX,E,mCCzBpBY,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAqDVP,EAAY,CAChBQ,qBApD2B,WAC3B,OAAOF,EAAAA,EAAAA,IACA,uBAAwB,CAC3BG,OAAQ,CACNC,QAASH,KAGZN,MAAK,SAAAC,GAAQ,OAAIA,EAASS,KAAKC,OAAlB,GACjB,EA6CCC,aA3CmB,SAAAC,GACnB,OAAOR,EAAAA,EAAAA,IACA,gBAAiB,CACpBG,OAAQ,CACNC,QAASH,EACTO,MAAOA,KAGVb,MAAK,SAAAC,GAAQ,OAAIA,EAASS,KAAKC,OAAlB,GACjB,EAmCCG,eAjCqB,SAAAjC,GACrB,OAAOwB,EAAAA,EAAAA,IACA,UAAYxB,EAAI,CACnB2B,OAAQ,CACNC,QAASH,KAGZN,MAAK,SAAAC,GAAQ,OAAIA,EAASS,IAAb,GACjB,EA0BCK,sBAxB4B,SAAAlC,GAC5B,OAAOwB,EAAAA,EAAAA,IACA,UAAYxB,EAAK,WAAY,CAChC2B,OAAQ,CACNC,QAASH,KAGZN,MAAK,SAAAC,GAAQ,OAAIA,EAASS,KAAKM,IAAlB,GACjB,EAiBCC,sBAf4B,SAAApC,GAC5B,OAAOwB,EAAAA,EAAAA,IACA,UAAYxB,EAAK,WAAY,CAChC2B,OAAQ,CACNC,QAASH,KAGZN,MAAK,SAAAC,GAAQ,OAAIA,EAASS,KAAKC,OAAlB,GACjB,GAUD,K","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.js","pages/Home.js","services/movies-api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  margin-top: 15px;\n\n  display: flex; /* используем flexbox для элементов списка */\n  flex-wrap: wrap; /* позволяет элементам переноситься на новую строку */\n  list-style: none; /* убираем маркеры списка */\n  padding: 0; /* убираем отступы вокруг списка */\n`;\n\nexport const Item = styled.li`\n  flex: 0 0 200px; /* задаем каждому элементу фиксированную ширину в 200px */\n  margin-left: 20px; /* добавляем небольшой отступ между элементами списка */\n  margin-right: 20px; /* добавляем небольшой отступ между элементами списка */\n  margin-bottom: 20px; /* добавляем отступ снизу каждого элемента списка */\n`;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { List, Item } from './MoviesList.styled';\nimport img from '../../img/no_name.png';\n\nconst MoviesList = ({ movies, location }) => (\n  <List>\n    {movies.map(({ id, poster_path, release_date, title, vote_average }) => (\n      <Item key={id}>\n        <Link to={`/movies/${id}`} state={{ from: location }}>\n          {poster_path ? (\n            <img\n              src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\n              alt={title}\n              width=\"250px\"\n              height=\"350px\"\n            />\n          ) : (\n            <img src={`${img}`} alt={title} width=\"250px\" height=\"350px\" />\n          )}\n          <h2>{title}</h2>\n          <p>{release_date}</p>\n          <p>{vote_average}</p>\n        </Link>\n      </Item>\n    ))}\n  </List>\n);\n\nexport default MoviesList;\n","import { useState, useEffect, memo } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport moviesAPI from '../services/movies-api';\n\nimport MoviesList from '../components/MoviesList/MoviesList';\n\nconst Home = () => {\n  const location = useLocation();\n  const [trendingMovies, setTrendingMovies] = useState([]);\n\n  useEffect(() => {\n    moviesAPI.searchMoviesTrending().then(response => {\n      setTrendingMovies(response);\n    });\n  }, []);\n\n  console.log(trendingMovies);\n\n  return (\n    <>\n      <div>ТОП 20 Фильмов</div>\n\n      <MoviesList movies={trendingMovies} location={location} />\n    </>\n  );\n};\n\nexport default memo(Home);\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '09e88d7dd6157842e835fc31a8c547c7';\n\nconst searchMoviesTrending = () => {\n  return axios\n    .get('/trending/movie/week', {\n      params: {\n        api_key: API_KEY,\n      },\n    })\n    .then(response => response.data.results);\n};\n\nconst searchMovies = query => {\n  return axios\n    .get('/search/movie', {\n      params: {\n        api_key: API_KEY,\n        query: query,\n      },\n    })\n    .then(response => response.data.results);\n};\n\nconst searchMoviesID = id => {\n  return axios\n    .get('/movie/' + id, {\n      params: {\n        api_key: API_KEY,\n      },\n    })\n    .then(response => response.data);\n};\n\nconst searchMoviesIDcredits = id => {\n  return axios\n    .get('/movie/' + id + '/credits', {\n      params: {\n        api_key: API_KEY,\n      },\n    })\n    .then(response => response.data.cast);\n};\n\nconst searchMoviesIDreviews = id => {\n  return axios\n    .get('/movie/' + id + '/reviews', {\n      params: {\n        api_key: API_KEY,\n      },\n    })\n    .then(response => response.data.results);\n};\n\nconst moviesAPI = {\n  searchMoviesTrending,\n  searchMovies,\n  searchMoviesID,\n  searchMoviesIDcredits,\n  searchMoviesIDreviews,\n};\n\nexport default moviesAPI;\n"],"names":["List","styled","Item","movies","location","map","id","poster_path","release_date","title","vote_average","to","state","from","src","alt","width","height","Home","useLocation","useState","trendingMovies","setTrendingMovies","useEffect","moviesAPI","then","response","console","log","memo","axios","API_KEY","searchMoviesTrending","params","api_key","data","results","searchMovies","query","searchMoviesID","searchMoviesIDcredits","cast","searchMoviesIDreviews"],"sourceRoot":""}